---
- hosts: localhost
  connection: local
  name: Configure local machine
  vars:
    downloads: "{{ ansible_env.HOME }}/.ansible-downloads"
    applications_dir: "/Applications"
    mount_path: /Volumes
    data_dir: "{{ lookup('env', 'HOME') }}/data"
  vars_prompt:
  - name: my_ssh_passphrase
    prompt: What is your ssh passphrase? (git, etc)
    private: true
    confirm: false
  - name: my_gpg_passphrase
    prompt: What is your gpg passphrase? (git, etc)
    private: true
    confirm: false
  - name: github_access_token
    prompt: Github Access Token for updating keys
    private: true
    confirm: false
  - name: my_email
    prompt: What is your primary email? (git, etc.)
    private: false
    confirm: false
  - name: my_name
    prompt: What is your full name? (git, etc.)
    private: false
    confirm: false
  - name: github_username
    prompt: What is your GitHub username?
    private: false
    confirm: false
  pre_tasks:
  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: "{{ data_dir }}"
      state: directory
      mode: '0755'
  - name: Validate Email Format
    fail:
      msg: "Invalid email format. Please enter a valid email address."
    when: my_email is not regex('.+@.+\..+')
  - name: Print Email
    debug:
      msg: "Your email is {{ my_email }}"
  # - name: Login to app store warning.
  #   pause:
  #     prompt: "Make sure you login to the apple app store before continuing."
  tasks:
  - name: Print all available facts
    ansible.builtin.debug:
      var: ansible_facts
    tags:
    - debug
  - name: Read machine hostname var
    ansible.builtin.shell: hostname
    register: machine_hostname
    tags:
    - always
  - set_fact: machine_hostname={{ machine_hostname.stdout }}
    tags:
    - always
  - name: Create Ansible downloads directory
    file: path={{ downloads }} state=directory
  - name: Setting installer source to "{{ downloads }}"
    set_fact:
      installer_source: "{{downloads}}"
  - include_tasks: tasks/core/main.yml
  - include_tasks: tasks/homebrew/main.yml
    when: ansible_facts['os_family'] == "Darwin"
  - include_tasks: tasks/adobe/main.yml
    when: ansible_facts['os_family'] == "Darwin"
    with_items:
    # - { name: "Adobe Creative Cloud", id: "LRCC", downloadName: "Lightroom", installerName: "Lightroom Installer", finalAppName: 'Adobe Creative Cloud' }
    - { name: "Lightroom", id: "LRCC", downloadName: "Lightroom", installerName: "Lightroom Installer", finalAppName: 'Adobe Lightroom CC' }
    - { name: "Acrobat DC", id: "APRO", downloadName: "Adobe Acrobat DC", installerName: "Acrobat DC Installer", finalAppName: 'Adobe Acrobat DC' }
    - { name: "Photoshop", id: "PHSP", downloadName: "Photoshop", installerName: "Photoshop Installer", finalAppName: 'Adobe Photoshop 2024' }
    loop_control:
      loop_var: item
  - include_tasks: tasks/mac/main.yml
    when: ansible_facts['os_family'] == "Darwin"
  - include_tasks: tasks/core/ssh.yml
  - include_tasks: tasks/git/main.yml
  - include_tasks: tasks/shell/main.yml


